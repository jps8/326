NAME: Chris Piller
LOGIN: cpiller

Part 2, Assignment #4, COS 326
------------------------------

Part 2.1:
--------

Prove that for all a, b, c : complex,

cadd a (cadd b c) == cadd (cadd a b) c

Proof:

    cadd a (cadd b c)                left side of equation
==  cadd a (let (x1,y1) = b in
            let (x2,y2) = c in
            (x1+x2,y1+y2))           unrolling cadd function
==  cadd a (b1+c1,b2+c2)             simplifying cadd
== (let (x1,y1) = a in
    let (x2,y2) = (b1+c1,b2+c2) in
    (x1+x2,y1+y2))                   unrolling outer cadd function
== (a1+b1+c1,a2+b2+c2)               simplifying outer cadd
== cadd (a1+b1,a2+b2) (c1,c2)        regrouping cadd, skipping unrolling step
== cadd (a1+b1,a2+b2) c              substituting c for (c1,c2)
== cadd (cadd (a1,a2) (b1,b2)) c     re-packaging (a1+b1,a2+b2) into cadd
== cadd (cadd a b) c                 substituting a and b
QED


Part 2.2: 
---------

Prove that for all integer lists xs and ys,
max (maxs xs) (maxs ys) == (maxs (append xs ys)).

Clearly justify each step of your proof.

Proof:  By induction on the structure of the list xs.

case xs == []:

To show:  max (maxs []) (maxs ys) == (maxs (append [] ys))

Proof:

	max (maxs []) (maxs ys)			xs = [] is given
==  max (min_int) (maxs ys)			using the maxs function to substitue
==  max (maxs ys) (min_int) 		commutativity of the max function
== 	if (maxs ys) >= min_int
	then (maxs ys) else min_int		substituting into the max function
==	maxs ys							any integer will be >=min_int by definition
== 	maxs (append [] ys)				match function of append [] ys gives ys

Therefore max (maxs xs) (maxs ys) == maxs (append xs ys) whenever xs == [] 


case xs == hd::tail:

IH: For all integer lists tl for which 
	max (maxs tl) (maxs ys) == (maxs (append tl ys)), 
	max	(maxs xs) (maxs ys) == (maxs (append xs ys))
	holds for all xs of the form hd::tl.

To show: max (maxs xs) (maxs ys) == (maxs (append xs ys)) for all xs.

Proof:

Lemma 1:
	max	(maxs xs) (maxs ys)				left side of the equation
== 	max (maxs hd::tl) (maxs ys)			xs is not [], replace with hd:tl form
==  max (max hd (maxs tl)) (maxs ys)	use maxs match statement to substitute
==  max hd (max (maxs tl) (maxs ys))	associativity of max

Lemma 2:
	maxs (append xs ys)					right side of the equation
==	maxs (append hd::tl ys)				xs is not [], replace with hd:tl form
==  maxs (hd::append tl ys)				match statement of append
== 	max hd (maxs (append tl ys))		match statement of maxs

Therefore, anytime max (maxs tl) (maxs ys) == maxs (append tl ys),
max (maxs hd:tl) (maxs ys) == (maxs (append hd:tl ys)) by transitivity
of equality.  Because this is true when tl == [] as proven above, 
all xs must allow the theorem to be true.

QED!

Part 2.3: 
---------

(a) Prove that for all integer lists l, bump1 l == bump2 l.

Proof: 







(b) Prove that for all integer lists l, bump1 l == bump3 l.

Proof:








(c) In one sentence, what's the big difference between parts (a) and (b)?





Part 2.4:
---------

Either prove or disprove each of the following. You will do any proofs using
induction on lists and you will disprove any false statement by providing a
counter-example to the claim.  When you do a proof, be sure to use the 
standard template for list proofs.

(a) For all l : ('a * 'b) list, zip(unzip l) == l.







(b) For all l1 : 'a list, l2 : 'b list, unzip(zip (l1,l2)) == (l1,l2).

Counterexample:
If l1 = [1;2;3;4;5] and l2 = [6;7;8;9] then 
zip (l1,l2) = [(1,6); (2,7); (3,8); (4,9)]
and unzip (zip (l1,l2)) = ([1;2;3;4], [6;7;8;9]), which does
not equal (l1,l2).

This theorem is false.
